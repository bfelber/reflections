How did viewing a diff between two versions of a file help me see the bug that was introduced?
We new the bug was in the changes, diff isolated the change.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term? 
If a bug is introduced it could help us understand when it got in the code.
It give us rollback capability, which allows you to experiment without fear of breaking things. That is as long as the 
experiments are not released without testing.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: You can choose the extent of a functional/logic change.
	Groups of files that are part of a functional change can be commited together so for example an entire feature can be rolled back.
Cons: You may screw up and forget to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
With code changes in multiple files are often interdependent. Not so much with documents, usually.
As mentioned above a new feature or a bug fix may consist of multiple files.

How can you use the commands git log and git diff to view the history of files?
The log shows a history of commits. Diff can be used to see the content or changes associated with each commit.

How might using version control make you more confident to make changes that could break something?
You can easily get back to where you were by bringing back an old version.

Now that you have your workspace set up, what do you want to try using Git for?
To do the Android Development course. Specifically, to git the course material.

